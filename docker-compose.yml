version: "3.8"
services:
# container frontend
  front:
    container_name: front
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - "${FRONT_PORT}:${FRONT_PORT}"
    environment:
      - BACKEND_URL=http://back:${BACK_PORT}
    depends_on:
      - back
    networks:
      - front
# container backend
  back:
    container_name: back
    build:
      context: ./back
      dockerfile: Dockerfile
    ports:
      - "${BACK_PORT}:${BACK_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    depends_on:
      - db
    networks:
      - back
      - front

  # container Db
  db:
    container_name: db
    image: postgres

    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - back

# container seeding data
  seeder:
    build:
      context: ./back
      dockerfile: Dockerfile  # on réutilise la même image
    environment:
      POSTGRES_HOST: db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

    container_name: Seeding_data
    depends_on:
      - db
    # Commande qui lance le script de seed
    command: npm run migrate-and-seed
    networks:
      - back 

volumes:
  postgres_data:


networks:
  back:
    driver: bridge
  front:
    driver: bridge

